// Value in scale in $modular-scale?
// Used in following fontsize mixin.
@function in-modular-scale($scale, $key) {
  $map: map-get($modular-scale, $scale);
  $output: map-has-key($map, $key);
  @return $output;
}

@function flexy-typo-get-point($i) {
  @return to-int(nth($points, $i));
}

@function flexy-typo-get-font-size($font-size, $breakpoint: 0) {
  $value: type-of($font-size);
  $scale: if($breakpoint == all, scale-0, scale-#{$breakpoint});

  @if $value == number {

    @return $font-size;
    // If using a variable from the scale for fontsize.

  } @else if (type-of($scale) == map & & in-modular-scale($scale, $font-size)) {

    // Check if value exists in scale.

    @return map-get(map-get($modular-scale, $scale), $font-size);

  } @else {

    @warn "#{$font-size} with #{$breakpoint} breakpoint is not a valid scale variable";
    @return null;

  }
}

@function flexy-rhythm-get-rootsize($i: 1) {
  $index: if($i == all, 1, $i);

  @if ($index <= 0) {
    @if ($flexy-debug) {
      @warn "Index is lte zeo - #{$index}. Use all breakpoints.";
    }

    $index: 1;
  }

  @return nth($sizes, $index);
}

@function flexy-rhythm-offset-shift($fontsize, $lineheight: 2, $below: 2, $breakpoint: 0, $cap-height: $base-cap-height) {
  $rootsize: flexy-rhythm-get-rootsize($breakpoint);
  @return #{($fontsize / 2 * (($lineheight * $rootsize / $fontsize) - $cap-height)) / $rootsize + 0.00001}rem;
}

@function flexy-rhythm-offset-push($fontsize, $lineheight: 2, $below: 2, $breakpoint: 0, $cap-height: $base-cap-height) {
  $rootsize: flexy-rhythm-get-rootsize($breakpoint);
  @return #{$below - (($fontsize / 2 * (($lineheight * $rootsize / $fontsize) - $cap-height)) / $rootsize + 0.00001)}rem;
}
